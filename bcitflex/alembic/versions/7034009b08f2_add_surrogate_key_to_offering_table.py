"""Add surrogate key to offering table

Revision ID: 7034009b08f2
Revises: 6253c78c6b3a
Create Date: 2023-10-23 02:57:24.268575

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = "7034009b08f2"
down_revision = "d0c807fc8328"
branch_labels = None
depends_on = None


def upgrade() -> None:
    op.execute(sa.schema.CreateSequence(sa.Sequence("offering_id_seq")))
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column(
        "meeting",
        sa.Column("offering_id", sa.Integer(), autoincrement=False, nullable=True),
    )
    op.execute("ALTER TABLE meeting DROP CONSTRAINT IF EXISTS meeting_crn_fkey")
    op.execute("ALTER TABLE meeting DROP CONSTRAINT IF EXISTS fk_meeting_crn_offering")
    op.execute("ALTER TABLE offering DROP CONSTRAINT IF EXISTS offering_pkey")
    op.execute("ALTER TABLE offering DROP CONSTRAINT IF EXISTS pk_offering")
    op.add_column(
        "offering",
        sa.Column(
            "offering_id",
            sa.Integer(),
            server_default=sa.text("nextval('offering_id_seq')"),
            nullable=False,
            comment="Unique identifier for offering.",
        ),
    )
    op.create_primary_key("pk_offering", "offering", ["offering_id"])
    op.execute(
        "UPDATE meeting SET offering_id = (SELECT offering_id FROM offering WHERE offering.crn = meeting.crn)"
    )
    op.alter_column(
        "meeting",
        "offering_id",
        existing_type=sa.INTEGER(),
        nullable=False,
        comment="Unique identifier for offering.",
    )
    op.execute("ALTER TABLE meeting DROP CONSTRAINT IF EXISTS meeting_pkey")
    op.execute("ALTER TABLE meeting DROP CONSTRAINT IF EXISTS pk_meeting")
    op.create_primary_key("pk_meeting", "meeting", ["meeting_id", "offering_id"])
    op.create_foreign_key(
        op.f("fk_meeting_offering_id_offering"),
        "meeting",
        "offering",
        ["offering_id"],
        ["offering_id"],
        ondelete="CASCADE",
    )
    op.execute(
        """
        DROP RULE "_soft_delete" ON "meeting";
    """
    )
    op.execute(
        """
        CREATE RULE "_soft_delete" AS ON DELETE TO "meeting" DO INSTEAD (
            UPDATE meeting SET deleted_at = NOW() WHERE meeting_id = OLD.meeting_id AND offering_id = OLD.offering_id AND deleted_at IS NULL
        );
    """
    )
    op.drop_column("meeting", "crn")
    op.alter_column(
        "offering",
        "crn",
        existing_type=sa.VARCHAR(length=5),
        comment="Course Reference Number, unique by term.",
        existing_comment="Course Reference Number, unique to offering.",
        existing_nullable=False,
    )
    op.create_unique_constraint(
        op.f("uq_offering_crn_term_id"), "offering", ["crn", "term_id"]
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(op.f("uq_offering_crn_term_id"), "offering", type_="unique")
    op.drop_constraint(
        op.f("fk_meeting_offering_id_offering"), "meeting", type_="foreignkey"
    )
    op.drop_constraint("pk_offering", "offering", type_="primary")
    op.drop_constraint("pk_meeting", "meeting", type_="primary")
    op.alter_column(
        "offering",
        "crn",
        existing_type=sa.VARCHAR(length=5),
        comment="Course Reference Number, unique to offering.",
        existing_comment="Course Reference Number, unique by term.",
        existing_nullable=False,
    )
    op.add_column(
        "meeting",
        sa.Column("crn", sa.VARCHAR(length=5), autoincrement=False, nullable=True),
    )
    op.create_primary_key("pk_offering", "offering", ["crn"])
    op.execute(
        "UPDATE meeting SET crn = (SELECT crn FROM offering WHERE offering.offering_id = meeting.offering_id)"
    )
    op.alter_column(
        "meeting",
        "crn",
        existing_type=sa.VARCHAR(length=5),
        nullable=False,
    )
    op.create_primary_key("meeting_pkey", "meeting", ["meeting_id", "crn"])
    op.create_foreign_key(
        "meeting_crn_fkey",
        "meeting",
        "offering",
        ["crn"],
        ["crn"],
        ondelete="CASCADE",
    )
    op.execute(
        """
        DROP RULE "_soft_delete" ON "meeting"
    """
    )
    op.execute(
        """
        CREATE RULE "_soft_delete" AS ON DELETE TO "meeting" DO INSTEAD (
            UPDATE meeting SET deleted_at = NOW() WHERE meeting_id = OLD.meeting_id AND crn = OLD.crn AND deleted_at IS NULL
        )
    """
    )
    op.drop_column("offering", "offering_id")
    op.drop_column("meeting", "offering_id")
    # ### end Alembic commands ###
    op.execute(sa.schema.DropSequence(sa.Sequence("offering_id_seq")))
