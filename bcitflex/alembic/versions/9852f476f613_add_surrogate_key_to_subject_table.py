"""Add surrogate key to subject table

Revision ID: 9852f476f613
Revises: 28a368e5676b
Create Date: 2024-03-03 13:24:58.578358

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = "9852f476f613"
down_revision = "28a368e5676b"
branch_labels = None
depends_on = None


def upgrade() -> None:
    op.execute(sa.schema.CreateSequence(sa.Sequence("subject_id_seq")))
    # add id and code columns to subject table
    op.add_column(
        "subject",
        sa.Column(
            "id",
            sa.Integer(),
            server_default=sa.text("nextval('subject_id_seq')"),
            nullable=False,
            comment="Serial subject ID.",
        ),
    )
    op.add_column(
        "subject",
        sa.Column(
            "code",
            sa.String(length=4),
            nullable=True,
            comment="Subject code, e.g. COMP.",
        ),
    )
    # copy data from subject_id column to new columns
    op.execute(
        """
        UPDATE subject
        SET code = subject_id;
        """
    )
    op.drop_constraint("course_subject_id_fkey", "course", type_="foreignkey")
    op.execute(
        """
        UPDATE course
        SET subject_id = subject.id
        FROM subject
        WHERE subject.code = course.subject_id
        """
    )
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column(
        "course",
        "subject_id",
        existing_type=sa.VARCHAR(),
        type_=sa.Integer(),
        existing_nullable=False,
        postgresql_using="subject_id::integer",
    )
    op.create_unique_constraint(op.f("uq_subject_code"), "subject", ["code"])
    op.drop_column("subject", "subject_id")
    # ### end Alembic commands ###
    op.create_primary_key(
        op.f("pk_subject"),
        "subject",
        ["id"],
    )
    op.create_foreign_key(
        op.f("fk_course_subject_id_subject"),
        "course",
        "subject",
        ["subject_id"],
        ["id"],
        ondelete="CASCADE",
    )
    op.alter_column(
        "subject",
        "code",
        existing_type=sa.String(length=4),
        existing_nullable=True,
        nullable=False,
    )


def downgrade() -> None:
    # add subject_id column
    op.add_column(
        "subject",
        sa.Column(
            "subject_id",
            sa.VARCHAR(length=4),
            autoincrement=False,
            nullable=True,
            comment="Subject code, e.g. COMP.",
        ),
    )
    op.execute(
        """
        UPDATE subject
        SET subject_id = code;
        """
    )
    # update foreign key on course
    op.drop_constraint(
        op.f("fk_course_subject_id_subject"), "course", type_="foreignkey"
    )
    op.alter_column(
        "course",
        "subject_id",
        existing_type=sa.Integer(),
        type_=sa.VARCHAR(),
        existing_nullable=False,
    )
    op.execute(
        """
        UPDATE course
        SET subject_id = subject.code
        FROM subject
        WHERE subject.id = course.subject_id::integer
        """
    )
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(op.f("uq_subject_code"), "subject", type_="unique")
    op.drop_column("subject", "code")
    op.drop_column("subject", "id")
    # ### end Alembic commands ###
    op.create_primary_key(op.f("pk_subject"), "subject", ["subject_id"])
    op.create_foreign_key(
        "course_subject_id_fkey",
        "course",
        "subject",
        ["subject_id"],
        ["subject_id"],
        ondelete="CASCADE",
    )
    op.alter_column(
        "subject",
        "subject_id",
        existing_type=sa.VARCHAR(length=4),
        existing_nullable=True,
        nullable=False,
    )
    op.execute(sa.schema.DropSequence(sa.Sequence("subject_id_seq")))
