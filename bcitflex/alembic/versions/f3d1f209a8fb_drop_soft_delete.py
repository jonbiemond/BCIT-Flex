"""Drop soft delete

Revision ID: f3d1f209a8fb
Revises: db4d9a6c53f9
Create Date: 2024-03-03 08:09:30.040499

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

from bcitflex.alembic.utils import soft_delete_rule_ddl

# revision identifiers, used by Alembic.
revision = "f3d1f209a8fb"
down_revision = "db4d9a6c53f9"
branch_labels = None
depends_on = None

TABLES = [
    "course",
    "subject",
    "term",
    "offering",
    "meeting",
    "user",
    "prereq_and",
    "prereq_or",
]


def upgrade() -> None:
    for table in TABLES:
        op.execute(f'DROP RULE _soft_delete ON "{table}";')
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column("course", "deleted_at")
    op.drop_column("meeting", "deleted_at")
    op.drop_column("offering", "deleted_at")
    op.drop_column("prereq_and", "deleted_at")
    op.drop_column("prereq_or", "deleted_at")
    op.drop_column("program", "deleted_at")
    op.drop_column("subject", "deleted_at")
    op.drop_column("term", "deleted_at")
    op.drop_column("user", "deleted_at")
    op.drop_column("user_preference", "deleted_at")
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column(
        "user_preference",
        sa.Column(
            "deleted_at",
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.add_column(
        "user",
        sa.Column(
            "deleted_at",
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.add_column(
        "term",
        sa.Column(
            "deleted_at",
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.add_column(
        "subject",
        sa.Column(
            "deleted_at",
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.add_column(
        "program",
        sa.Column(
            "deleted_at",
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.add_column(
        "prereq_or",
        sa.Column(
            "deleted_at",
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.add_column(
        "prereq_and",
        sa.Column(
            "deleted_at",
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.add_column(
        "offering",
        sa.Column(
            "deleted_at",
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.add_column(
        "meeting",
        sa.Column(
            "deleted_at",
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.add_column(
        "course",
        sa.Column(
            "deleted_at",
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=True,
        ),
    )
    # ### end Alembic commands ###
    for table in TABLES:
        op.execute(soft_delete_rule_ddl(table))
